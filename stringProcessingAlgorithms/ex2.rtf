{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\fs24 \cf0 String Processing Algorithms week 1, ex 2\
\
a) average time complexity O(n log n)\
\
If we can assume that the input of the algorithm is a random permutation of the input values, then whatever pivot algorithm should yield O(n log n) running time. Also, if a pivot can be chosen in a  way where partition is done well enough, we can be sure that the running time will not exceed this running time.\
\
b) expected time complexity O(n log n)\
\
If we choose our pivot uniformly at random, the running time will be independent of input leading to an expected running time of O(n log n)\
\
c) worst case complexity O(n log n)\
\
If we can be certain that at all times the pivot will choose the pivot element in a way that the running time will be of complexity O(n log n), this is the worst case complexity. in practice we can never be sure of this, and a worst case complexity of this kind can be achieved only by using other efficient sorting algorithms, like merge sort or heap sort.}